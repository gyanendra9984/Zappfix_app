# Generated by Django 5.0.2 on 2024-03-11 20:31

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the certification', max_length=255)),
                ('issuing_authority', models.CharField(help_text='Issuing authority for the certification', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('email', models.EmailField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(max_length=10)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=10)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_valid_till', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomWorker',
            fields=[
                ('email', models.EmailField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(max_length=10)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=10)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_valid_till', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=50)),
                ('neighborhood', models.CharField(blank=True, help_text='Neighborhood within the city', max_length=50, null=True)),
                ('street_address', models.CharField(blank=True, help_text='Street address within the neighborhood', max_length=255, null=True)),
                ('zip_code', models.CharField(blank=True, help_text='ZIP code', max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, help_text='Description of the service')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_level', models.IntegerField()),
                ('isAvailable', models.BooleanField(default=True)),
                ('work_history', models.TextField()),
                ('years_of_experience', models.IntegerField()),
                ('customer_reviews', models.TextField()),
                ('overall_rating', models.FloatField()),
                ('training_programs_completed', models.TextField()),
                ('min_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('certifications', models.ManyToManyField(related_name='workers', to='HandymanHive.certification')),
                ('preferred_locations', models.ManyToManyField(related_name='workers', to='HandymanHive.location')),
                ('services_offered', models.ManyToManyField(related_name='workers', to='HandymanHive.service')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='HandymanHive.customworker')),
            ],
        ),
        migrations.CreateModel(
            name='AbstractUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_valid_till', models.DateTimeField(blank=True, null=True)),
                ('user_details', models.TextField(blank=True, null=True)),
                ('is_worker', models.BooleanField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
